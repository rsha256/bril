@main(input: int) {
.sentinel_entry:
  n.0: int = id input;
  zero.0: int = const 0;
  icount.0: int = id zero.0;
  site.0: ptr<int> = alloc n.0;
  result.0: int = call @queen zero.0 n.0 icount.0 site.0;
  print result.0;
  free site.0;
}
@queen(n: int, queens: int, icount: int, site: ptr<int>): int {
.sentinel_entry:
  one.0: int = const 1;
  ite.0: int = id one.0;
  ret_cond.0: bool = eq n queens;
  br ret_cond.0 .next.ret .for.cond;
.next.ret:
  icount.3: int = add icount one.0;
  ret icount.3;
.for.cond:
  icount.0: int = phi icount icount.1 icount.3 .sentinel_entry .next.loop .next.ret;
  ite.1: int = phi ite.0 ite.2 ite.0 .sentinel_entry .next.loop .next.ret;
  n_1.0: int = phi __undefined n_1.1 __undefined .sentinel_entry .next.loop .next.ret;
  for_cond_0.1: bool = le ite.1 queens;
  br for_cond_0.1 .for.body .next.ret.1;
.for.body:
  nptr.1: ptr<int> = ptradd site n;
  store nptr.1 ite.1;
  is_valid.1: bool = call @valid n site;
  br is_valid.1 .rec.func .next.loop;
.rec.func:
  n_1.2: int = add n one.0;
  icount.2: int = call @queen n_1.2 queens icount.0 site;
.next.loop:
  icount.1: int = phi icount.0 icount.2 .for.body .rec.func;
  n_1.1: int = phi n_1.0 n_1.2 .for.body .rec.func;
  ite.2: int = add ite.1 one.0;
  jmp .for.cond;
.next.ret.1:
  ret icount.0;
}
@valid(n: int, site: ptr<int>): bool {
.sentinel_entry:
  zero.0: int = const 0;
  one.0: int = const 1;
  true.0: bool = eq one.0 one.0;
  false.0: bool = eq zero.0 one.0;
  ite.0: int = id zero.0;
.for.cond:
  ite.1: int = phi ite.0 ite.2 .sentinel_entry .false.loop;
  for_cond.1: bool = lt ite.1 n;
  br for_cond.1 .for.body .ret.end;
.for.body:
  iptr.1: ptr<int> = ptradd site ite.1;
  nptr.1: ptr<int> = ptradd site n;
  help_0.1: int = const 500;
  vali.1: int = load iptr.1;
  valn.1: int = load nptr.1;
  eq_cond_0.1: bool = eq vali.1 valn.1;
  br eq_cond_0.1 .true.ret.0 .false.else;
.true.ret.0:
  ret false.0;
.false.else:
  sub_0.1: int = sub vali.1 valn.1;
  sub_1.1: int = sub valn.1 vali.1;
  sub_2.1: int = sub n ite.1;
  eq_cond_1.1: bool = eq sub_0.1 sub_2.1;
  eq_cond_2.1: bool = eq sub_1.1 sub_2.1;
  eq_cond_12.1: bool = or eq_cond_1.1 eq_cond_2.1;
  br eq_cond_12.1 .true.ret.1 .false.loop;
.true.ret.1:
  ret false.0;
.false.loop:
  ite.2: int = add ite.1 one.0;
  jmp .for.cond;
.ret.end:
  ret true.0;
}
